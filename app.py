# -*- coding: utf-8 -*-
"""vox-dev-app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DmJdZ1G-ES03U_How66_j56RkwL_zbip
"""

import streamlit as st
import numpy as np
import plotly.graph_objects as go

# — Parameters —
Q_eq, P_eq = 10, 50
P_new = 40

# — User-controlled slider —
s = st.slider("Slope of Demand Curve", min_value=0.5, max_value=5.0, step=0.1, value=1.0)

# — Demand equation: pivot at (Q_eq, P_eq) —
b = P_eq + s * Q_eq
Q = np.linspace(0, 2 * Q_eq, 400)
P_d = b - s * Q

# — Original Consumer Surplus —
Q_cs = Q[Q <= Q_eq]
P_cs = b - s * Q_cs
orig_cs = 0.5 * s * Q_eq ** 2
cs_x = np.concatenate([Q_cs, Q_cs[::-1]])
cs_y = np.concatenate([P_cs, np.full_like(Q_cs, P_eq)])

# — Additional CS (between P_eq and P_new, up to demand curve) —
Q_new = (b - P_new) / s
Q_add = Q[(Q >= Q_eq) & (Q <= Q_new)]
add_x = np.concatenate([[0, Q_eq], Q_add, [Q_new, 0]])
add_y = np.concatenate([[P_eq, P_eq], (b - s * Q_add), [P_new, P_new]])

# — Analytical calculation —
rect = (P_eq - P_new) * Q_eq
tri = (b * (Q_new - Q_eq) - 0.5 * s * (Q_new ** 2 - Q_eq ** 2) - P_new * (Q_new - Q_eq))
add_cs = rect + tri
total_cs = orig_cs + add_cs

# — Plot —
fig = go.Figure()

# Demand curve
fig.add_trace(go.Scatter(x=Q, y=P_d, name="Demand", mode='lines'))

# Original price line
fig.add_trace(go.Scatter(x=[0, 2*Q_eq], y=[P_eq, P_eq], name="Original Price", line=dict(dash='dash')))

# New price line
fig.add_trace(go.Scatter(x=[0, 2*Q_eq], y=[P_new, P_new], name="New Price", line=dict(color='purple', dash='dot')))

# Original CS shading
fig.add_trace(go.Scatter(x=cs_x, y=cs_y, fill='toself', name='Original CS', opacity=0.4))

# Additional CS shading
fig.add_trace(go.Scatter(x=add_x, y=add_y, fill='toself', name='Additional CS',
                         fillcolor='purple', line=dict(color='purple'), opacity=0.4))

# Layout
fig.update_layout(
    width=1400,
    height=800,
    title="Consumer Surplus (CS) After Price Drop",
    xaxis_title="Quantity",
    yaxis_title="Price"
)

st.plotly_chart(fig)

# — Display summary —
st.markdown(f"""
**Demand Curve:**
P = {b:.1f} – {s:.1f}·Q

**Original CS:** {orig_cs:.1f}
**Additional CS:** {add_cs:.1f}
**Total CS:** {total_cs:.1f}
""")